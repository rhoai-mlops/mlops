---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: execute-ds-pipeline
spec:
  workspaces:
    - name: output
  params:
    - name: WORK_DIRECTORY
      description: Directory to start build in (handle multiple branches)
      type: string
    - name: APPLICATION_NAME
      description: Name of the model
      type: string
    - name: GIT_SHORT_REVISION
      description: Short Git commit hast
      type: string
  steps:
  - name: execute-ds-pipeline
    workingDir: $(workspaces.output.path)/$(params.WORK_DIRECTORY)/fraud-detection/production
    image: quay.io/rlundber/mlops-ct-cicd:0.4
    command: ["/bin/sh", "-c"]
    args:
    - |
      python3 -m pip install kfp.kubernetes
      cat << 'EOF' | python3
      import kfp
      import json
      from pipeline import fraud_training_pipeline

      namespace_file_path =\
          '/var/run/secrets/kubernetes.io/serviceaccount/namespace'
      with open(namespace_file_path, 'r') as namespace_file:
          namespace = namespace_file.read()

      kubeflow_endpoint =\
          f'https://ds-pipeline-dspa.{namespace}.svc:8443'

      sa_token_file_path = '/var/run/secrets/kubernetes.io/serviceaccount/token'
      with open(sa_token_file_path, 'r') as token_file:
          bearer_token = token_file.read()

      ssl_ca_cert =\
          '/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt'

      print(f'Connecting to Data Science Pipelines: {kubeflow_endpoint}')
      client = kfp.Client(
          host=kubeflow_endpoint,
          existing_token=bearer_token,
          ssl_ca_cert=ssl_ca_cert
      )

      with open('default_parameters.json') as f:
          default_parameters = json.load(f)
      
      default_parameters['version'] = "$(params.GIT_SHORT_REVISION)"
      default_parameters['model_name'] = "$(params.APPLICATION_NAME)"

      # start a run
      print("start a run🏃‍♂️")
      run_id = client.create_run_from_pipeline_func(
          fraud_training_pipeline,
          arguments=default_parameters,
          experiment_name="fraud-training",
          namespace="mlops-dev-zone",
          enable_caching=False
      )

      print("wait for the run to finish")
      # wait for the run to finish
      client.wait_for_run_completion(
          run_id=run_id.run_id, 
          timeout=7200,
          sleep_duration=5,
      )
      
      print("job finished")
      EOF

